// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int            @id @default(autoincrement())
  name               String
  email              String         @unique
  password           String
  savingsBalance     Float          @default(0)  // Remaining savings balance
  savingsPercent     Float?
  expensesPercent    Float?
  investmentsPercent Float?
  leftoverAction     String?        @default("savings")
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  sections           Section[]
  savingGoals        SavingGoal[]
  transactions       Transaction[]
  expenses           Expense[]
  investments        Investment[]
  incomes            Income[]
  availableIncome    AvailableIncome?
}

model Section {
  userId      Int     @id @unique
  savings     Float   @default(0)
  expenses    Float   @default(0)
  investments Float   @default(0)
  user        User    @relation(fields: [userId], references: [id])
}

model SavingGoal {
  id            Int     @id @default(autoincrement())
  userId        Int
  name          String
  targetAmount  Float
  currentAmount Float   @default(0)
  isCompleted   Boolean @default(false)
  category      String  // EMERGENCY, VACATION, VEHICLE, HOME, EDUCATION, OTHER
  targetDate    DateTime
  transferType  String? // EXPENSE or INVESTMENT
  transferId    Int?    // ID of the expense or investment it will transfer to
  purpose       String? // Detailed description of what this goal is for
  targetItem    String? // What specific item/service is being saved for
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User    @relation(fields: [userId], references: [id])
}

model Transaction {
  id          Int      @id @default(autoincrement())
  userId      Int
  type        String   // INCOME, EXPENSE, INVESTMENT, SAVING_GOAL_CONTRIBUTION, SAVING_GOAL_COMPLETION
  fromSection String?
  toSection   String?
  amount      Float
  description String?
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
}

model Expense {
  id          Int      @id @default(autoincrement())
  userId      Int
  amount      Float
  category    String
  description String?
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
}

model Investment {
  id            Int      @id @default(autoincrement())
  userId        Int
  assetName     String
  amount        Float
  investmentType String?  // Changed from purpose to investmentType
  totalReturn   Float?   // Actual return on investment
  isClosed      Boolean  @default(false) // Indicates if the investment is closed
  notes         String?  // Additional notes about the investment purpose
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id])
}

model Income {
  id            Int      @id @default(autoincrement())
  userId        Int
  amount        Float
  type          String   @default("regular")  // "regular" or "investment_return"
  investmentId  Int?     // Optional reference to the investment for investment returns
  description   String?
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id])
}

model AvailableIncome {
  userId      Int      @id @unique
  amount      Float    @default(0)
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
} 